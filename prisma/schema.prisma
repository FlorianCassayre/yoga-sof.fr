generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMINISTRATOR
  MANAGER
  ASSOCIATE
  MEMBER
}

// Start of the next-auth models

model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int      @map("user_id")
  type               String
  provider           String
  providerAccountId  String   @map("provider_account_id")
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Begin account custom fields

  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // End account custom fields

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id                  Int                  @id @default(autoincrement())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?            @map("email_verified")
  image               String?
  accounts            Account[]
  sessions            Session[]

  // Begin user custom fields

  role                UserRole             @default(MEMBER)
  customEmail         String?              @map("custom_email")
  customName          String?              @map("custom_name")
  publicAccessToken   String               @default(uuid()) @map("public_access_token")
  receiveEmails       Boolean              @default(true) @map("receive_emails")
  managedByUserId     Int?                 @map("managed_by_user_id")
  managedByUser       User?                @relation("user_manage_user", fields: [managedByUserId], references: [id])
  managedUsers        User[]               @relation("user_manage_user")
  transactions        Transaction[]

  createdAt           DateTime             @default(now()) @map("created_at")
  lastActivity        DateTime?            @map("last_activity")

  emailsReceived      EmailMessage[]
  courseRegistrations CourseRegistration[]
  coupons             Coupon[]
  memberships         Membership[]         @relation("user_membership")
  orders              Order[]

  disabled            Boolean              @default(false)

  // End user custom fields

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])

  @@map("verification_token")
}

// End of the next-auth models

enum LockEntityType {
  GLOBAL
}

model LockEntity {
  id LockEntityType @id

  @@map("lock_entity")
}

enum CourseType {
  YOGA_ADULT
  YOGA_CHILD
  YOGA_ADULT_CHILD
}

// For validation, follow:
// https://github.com/prisma/prisma/issues/3102
// https://github.com/prisma/prisma/issues/3388

model CourseModel {
  id          Int        @id @default(autoincrement())
  type        CourseType
  slots       Int        @db.UnsignedInt
  price       Int        @db.UnsignedInt
  weekday     Int        @db.UnsignedTinyInt
  timeStart  String      @db.VarChar(5) @map("time_start")
  timeEnd    String      @db.VarChar(5) @map("time_end")
  bundle      Boolean

  @@map("course_model")
}

model Course {
  id                Int                  @id @default(autoincrement())
  type              CourseType
  slots             Int                  @db.UnsignedInt
  price             Int                  @db.UnsignedInt
  dateStart         DateTime             @db.Timestamp(0) @map("date_start")
  dateEnd           DateTime             @db.Timestamp(0) @map("date_end")
  visible           Boolean              @default(true)
  isCanceled        Boolean              @default(false) @map("is_canceled")
  cancelationReason String?              @db.Text @map("cancelation_reason")
  notes             String?              @db.Text
  bundleId          Int?                 @map("bundle_id")
  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime             @updatedAt @map("updated_at")
  registrations     CourseRegistration[]
  bundle            CourseBundle?        @relation(fields: [bundleId], references: [id])

  @@map("course")
}

model CourseRegistration {
  id             Int       @id @default(autoincrement())
  userId         Int       @map("user_id")
  user           User      @relation(fields: [userId], references: [id])
  courseId       Int       @map("course_id")
  course         Course    @relation(fields: [courseId], references: [id])
  isUserCanceled Boolean   @default(false) @map("is_user_canceled")
  reminderSent   Boolean   @default(false) @map("reminder_sent")
  attended       Boolean?
  createdAt      DateTime  @default(now()) @map("created_at")
  canceledAt     DateTime? @map("canceled_at")

  orderUsedCoupons OrderUsedCouponCourseRegistration[]
  orderTrial OrderTrialCourseRegistration[]
  orderReplacementFrom OrderReplacementCourseRegistration[] @relation("order_replacement_from_course_registration")
  orderReplacementTo OrderReplacementCourseRegistration[] @relation("order_replacement_to_course_registration")
  orderPurchased Order[] @relation("order_purchased_course_registration")

  @@map("course_registration")
}

model CourseBundle {
  id        Int      @id @default(autoincrement())
  name      String
  price     Int      @db.UnsignedInt
  courses   Course[]
  createdAt DateTime @default(now()) @map("created_at")

  @@map("course_bundle")
}

enum EmailMessageType {
  SESSION_CANCELED
  SESSION_REMINDER_NEWCOMER
  SESSION_REGISTRATION
  ORDER_CREATED
  OTHER
}

model EmailMessage {
  id                 Int              @id @default(autoincrement())
  userId             Int              @map("user_id")
  user               User             @relation(fields: [userId], references: [id])
  type               EmailMessageType
  destinationAddress String?          @map("destination_address")
  ccAddress          String?          @map("cc_address")
  subject            String           @db.Text
  message            String           @db.Text
  createdAt          DateTime         @default(now()) @map("created_at")
  sentAt             DateTime?        @map("sent_at")
  attachments        EmailMessageAttachment[]

  @@map("email_message")
}

model EmailMessageAttachment {
  id             Int          @id @default(autoincrement())
  emailMessageId Int          @map("email_message_id")
  emailMessage   EmailMessage @relation(fields: [emailMessageId], references: [id])
  filename       String       @db.Text
  file           Bytes

  @@map("email_message_attachment")
}

enum TransactionType {
  CASH
  HELLO_ASSO
  CHECK
  TRANSFER
  AUTOMATIC_DEBIT
}

model Transaction {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  amount    Int      @db.UnsignedInt
  date      DateTime @db.Date
  type      TransactionType
  comment   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  orderId   Int?     @unique @map("order_id")
  order     Order?   @relation(fields: [orderId], references: [id])

  @@map("transaction")
}

model CouponModel {
  id         Int        @id @default(autoincrement())
  courseType CourseType @map("course_type")
  quantity   Int        @db.UnsignedInt
  price      Int        @db.UnsignedInt

  @@map("coupon_model")
}

model Coupon {
  id         Int        @id @default(autoincrement())
  code       String     @unique
  courseType CourseType @map("course_type")
  quantity   Int        @db.UnsignedInt
  price      Int        @db.UnsignedInt
  disabled   Boolean    @default(false)
  userId     Int        @map("user_id")
  user       User       @relation(fields: [userId], references: [id])
  createdAt  DateTime   @default(now()) @map("created_at")

  orderCourseRegistrations OrderUsedCouponCourseRegistration[]
  ordersPurchased Order[] @relation("order_purchased_coupon")

  @@map("coupon")
}

enum MembershipType {
  PERSON
  FAMILY
}

model MembershipModel {
  id    MembershipType @id
  price Int            @db.UnsignedInt

  @@map("membership_model")
}

model Membership {
  id        Int      @id @default(autoincrement())
  type      MembershipType
  dateStart DateTime @map("date_start") @db.Date
  dateEnd   DateTime @map("date_end") @db.Date
  price     Int      @db.UnsignedInt
  disabled  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  users     User[]   @relation("user_membership")

  ordersPurchased Order[] @relation("order_purchased_membership")

  @@map("membership")
}

model OrderUsedCouponCourseRegistration {
  orderId              Int    @map("order_id")
  order                Order  @relation(fields: [orderId], references: [id])
  couponId             Int    @map("coupon_id")
  coupon               Coupon @relation(fields: [couponId], references: [id])
  courseRegistrationId Int    @map("course_registration_id")
  courseRegistration   CourseRegistration @relation(fields: [courseRegistrationId], references: [id])

  @@id([orderId, couponId, courseRegistrationId])
  @@unique([orderId, courseRegistrationId])
  @@map("order_purchased_coupon_course_registration")
}

model OrderTrialCourseRegistration {
  orderId              Int   @map("order_id")
  order                Order @relation(fields: [orderId], references: [id])
  courseRegistrationId Int   @map("course_registration_id")
  courseRegistration   CourseRegistration @relation(fields: [courseRegistrationId], references: [id])
  price                Int   @db.UnsignedInt

  @@id([orderId, courseRegistrationId])
  @@map("order_trial_course_registration")
}

model OrderReplacementCourseRegistration {
  orderId                  Int   @map("order_id")
  order                    Order @relation(fields: [orderId], references: [id])
  fromCourseRegistrationId Int   @map("from_course_registration_id")
  fromCourseRegistration   CourseRegistration @relation(name: "order_replacement_from_course_registration", fields: [fromCourseRegistrationId], references: [id])
  toCourseRegistrationId   Int   @map("to_course_registration_id")
  toCourseRegistration     CourseRegistration @relation(name: "order_replacement_to_course_registration", fields: [toCourseRegistrationId], references: [id])

  @@id([orderId, fromCourseRegistrationId, toCourseRegistrationId])
  @@unique([orderId, fromCourseRegistrationId])
  @@unique([orderId, toCourseRegistrationId])
  @@map("order_replacement_course_registration")
}

enum PaymentRecipient {
  ORGANIZATION
  ENTERPRISE
}

model OrderPayment {
  orderId   Int   @id @map("order_id")
  order     Order @relation(fields: [orderId], references: [id])
  amount    Int   @db.UnsignedInt
  type      TransactionType
  recipient PaymentRecipient

  @@map("order_payment")
}

model Order {
  id     Int      @id @default(autoincrement())
  userId Int      @map("user_id")
  user   User     @relation(fields: [userId], references: [id])
  active Boolean  @default(true)
  date   DateTime @db.Date
  notes  String?  @db.Text
  computedAmount Int @db.UnsignedInt @map("computed_amount")
  createdAt DateTime @default(now()) @map("created_at")

  usedCouponCourseRegistrations OrderUsedCouponCourseRegistration[]
  purchasedCoupons Coupon[] @relation("order_purchased_coupon")
  purchasedMemberships Membership[] @relation("order_purchased_membership")
  trialCourseRegistrations OrderTrialCourseRegistration[]
  replacementCourseRegistrations OrderReplacementCourseRegistration[]
  purchasedCourseRegistrations CourseRegistration[] @relation("order_purchased_course_registration")
  payment OrderPayment?

  transaction Transaction?

  @@map("order")
}

model OtherPaymentCategory {
  id            Int    @id @default(autoincrement())
  name          String @db.Text
  otherPayments OtherPayment[]

  @@map("other_payment_category")
}

model OtherPayment {
  id          Int                  @id @default(autoincrement())
  categoryId  Int                  @map("category_id")
  category    OtherPaymentCategory @relation(fields: [categoryId], references: [id])
  type        TransactionType
  description String               @db.Text
  amountCents Int                  @map("amount_cents")
  provider    String               @db.Text
  recipient   PaymentRecipient
  date        DateTime             @db.Date
  createdAt   DateTime             @default(now()) @map("created_at")

  @@map("other_payment")
}
