generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Start of the next-auth models

model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int      @map("user_id")
  type               String
  provider           String
  providerAccountId  String   @map("provider_account_id")
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Begin account custom fields

  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // End account custom fields

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id                  Int                  @id @default(autoincrement())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?            @map("email_verified")
  image               String?
  accounts            Account[]
  sessions            Session[]

  // Begin user custom fields

  customEmail         String?              @map("custom_email")
  customName          String?              @map("custom_name")
  publicAccessToken   String               @default(uuid()) @map("public_access_token")
  receiveEmails       Boolean              @default(true) @map("receive_emails")

  createdAt           DateTime             @default(now()) @map("created_at")
  lastActivity        DateTime?            @map("last_activity")

  emailsReceived      EmailMessage[]
  courseRegistrations CourseRegistration[]

  disabled            Boolean              @default(false)

  // End user custom fields

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])

  @@map("verification_token")
}

// End of the next-auth models

model AdminWhitelist {
  email String @unique

  @@map("admin_whitelist")
}

enum CourseType {
  YOGA_ADULT
  YOGA_CHILD
  YOGA_ADULT_CHILD
}

// For validation, follow:
// https://github.com/prisma/prisma/issues/3102
// https://github.com/prisma/prisma/issues/3388

model CourseModel {
  id          Int        @id @default(autoincrement())
  type        CourseType
  slots       Int        @db.UnsignedInt
  price       Int        @db.UnsignedInt
  weekday     Int        @db.UnsignedTinyInt
  timeStart  String      @db.VarChar(5) @map("time_start")
  timeEnd    String      @db.VarChar(5) @map("time_end")
  bundle      Boolean

  @@map("course_model")
}

model Course {
  id                Int                  @id @default(autoincrement())
  type              CourseType
  slots             Int                  @db.UnsignedInt
  price             Int                  @db.UnsignedInt
  dateStart         DateTime             @db.Timestamp(0) @map("date_start")
  dateEnd           DateTime             @db.Timestamp(0) @map("date_end")
  isCanceled        Boolean              @default(false) @map("is_canceled")
  cancelationReason String?              @db.Text @map("cancelation_reason")
  notes             String?              @db.Text
  bundleId          Int?                 @map("bundle_id")
  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime             @updatedAt @map("updated_at")
  registrations     CourseRegistration[]
  bundle            CourseBundle?        @relation(fields: [bundleId], references: [id])

  @@map("course")
}

model CourseRegistration {
  id             Int       @id @default(autoincrement())
  userId         Int       @map("user_id")
  user           User      @relation(fields: [userId], references: [id])
  courseId       Int       @map("course_id")
  course         Course    @relation(fields: [courseId], references: [id])
  isUserCanceled Boolean   @default(false) @map("is_user_canceled")
  reminderSent   Boolean   @default(false) @map("reminder_sent")
  attended       Boolean?
  createdAt      DateTime  @default(now()) @map("created_at")
  canceledAt     DateTime? @map("canceled_at")

  @@map("course_registration")
}

model CourseBundle {
  id        Int      @id @default(autoincrement())
  name      String
  price     Int      @db.UnsignedInt
  courses   Course[]
  createdAt DateTime @default(now()) @map("created_at")

  @@map("course_bundle")
}

enum EmailMessageType {
  SESSION_CANCELED
  OTHER
}

model EmailMessage {
  id                 Int              @id @default(autoincrement())
  userId             Int              @map("user_id")
  user               User             @relation(fields: [userId], references: [id])
  type               EmailMessageType
  destinationAddress String           @map("destination_address")
  subject            String           @db.Text
  message            String           @db.Text
  createdAt          DateTime         @default(now()) @map("created_at")
  sentAt             DateTime?        @map("sent_at")

  @@map("email_message")
}
